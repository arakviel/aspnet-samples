using System.Security.Claims;
using AspNet.MinimalApi.IdentityWithEmailConfirmationAuth.Data;
using AspNet.MinimalApi.IdentityWithEmailConfirmationAuth.Extensions;
using AspNet.MinimalApi.IdentityWithEmailConfirmationAuth.Models;
using AspNet.MinimalApi.IdentityWithEmailConfirmationAuth.Services;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–æ–¥–∞—Ç–∫—É
var builder = WebApplication.CreateBuilder(args);

// === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–ï–†–í–Ü–°–Ü–í ===

// –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É OpenAPI/Swagger
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Identity with Email Confirmation API",
        Version = "v1",
        Description = "ASP.NET Core Identity –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏"
    });
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
builder.Services.AddDbContext<ApplicationDbContext>(options =>
{
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SQLite –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ (—É –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –∫—Ä–∞—â–µ PostgreSQL/SQL Server)
    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection")
                           ?? "Data Source=identity_email_confirmation.db";
    options.UseSqlite(connectionString);
});

// === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ASP.NET CORE IDENTITY ===

// –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
builder.Services.AddAuthorization();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
// –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ Bearer —Ç–æ–∫–µ–Ω–∏, —Ç–∞–∫ —ñ Cookies
// –ó–∞–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ/—Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç

// –í–∞—Ä—ñ–∞–Ω—Ç 1: –¢—ñ–ª—å–∫–∏ Bearer Token –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è (–¥–ª—è API)
builder.Services.AddAuthentication(options =>
    {
        options.DefaultAuthenticateScheme = IdentityConstants.BearerScheme;
        options.DefaultChallengeScheme = IdentityConstants.BearerScheme;
    })
    .AddBearerToken(IdentityConstants.BearerScheme, options =>
    {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Bearer —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è API
        options.BearerTokenExpiration = TimeSpan.FromHours(1); // –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω–∞
        options.RefreshTokenExpiration = TimeSpan.FromDays(7); // –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó refresh —Ç–æ–∫–µ–Ω–∞
    });

// –í–∞—Ä—ñ–∞–Ω—Ç 2: Cookie + Bearer Token –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è (–¥–ª—è –≤–µ–± + API)
// –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ —Ü–µ–π –±–ª–æ–∫, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ cookies
// builder.Services.AddAuthentication(IdentityConstants.ApplicationScheme)
//     .AddCookie(IdentityConstants.ApplicationScheme, options =>
//     {
//         options.LoginPath = "/login";
//         options.LogoutPath = "/logout";
//         options.ExpireTimeSpan = TimeSpan.FromDays(7);
//         options.SlidingExpiration = true;
//         options.Cookie.Name = "IdentityAuth";
//         options.Cookie.HttpOnly = true;
//         options.Cookie.SecurePolicy = CookieSecurePolicy.SameAsRequest;
//         options.Cookie.SameSite = SameSiteMode.Lax;
//     })
//     .AddBearerToken(IdentityConstants.BearerScheme, options =>
//     {
//         options.BearerTokenExpiration = TimeSpan.FromHours(1);
//         options.RefreshTokenExpiration = TimeSpan.FromDays(7);
//     });

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Identity
builder.Services.AddIdentityCore<User>(options =>
    {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤
        options.Password.RequireDigit = true; // –í–∏–º–∞–≥–∞—Ç–∏ —Ü–∏—Ñ—Ä–∏
        options.Password.RequireLowercase = true; // –í–∏–º–∞–≥–∞—Ç–∏ –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏
        options.Password.RequireUppercase = true; // –í–∏–º–∞–≥–∞—Ç–∏ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏
        options.Password.RequireNonAlphanumeric = false; // –ù–µ –≤–∏–º–∞–≥–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        options.Password.RequiredLength = 6; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—è

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        options.User.RequireUniqueEmail = true; // Email –º–∞—î –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(15); // –ß–∞—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        options.Lockout.MaxFailedAccessAttempts = 5; // –ú–∞–∫—Å–∏–º—É–º –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±
        options.Lockout.AllowedForNewUsers = true; // –î–æ–∑–≤–æ–ª–∏—Ç–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

        // –ö–õ–Æ–ß–û–í–ï –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø: –í–∏–º–∞–≥–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
        options.SignIn.RequireConfirmedEmail = true; // –£–í–Ü–ú–ö–ù–ï–ù–û –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
        options.SignIn.RequireConfirmedPhoneNumber = false; // –ù–µ –≤–∏–º–∞–≥–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
        options.Tokens.EmailConfirmationTokenProvider = TokenOptions.DefaultEmailProvider;
        options.Tokens.PasswordResetTokenProvider = TokenOptions.DefaultEmailProvider;
    })
    .AddEntityFrameworkStores<ApplicationDbContext>() // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Entity Framework
    .AddApiEndpoints() // –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ Identity
    .AddDefaultTokenProviders(); // –î–æ–¥–∞—î–º–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏ —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è

// –î–æ–¥–∞—î–º–æ email —Å–µ—Ä–≤—ñ—Å —è–∫ Transient –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ MapIdentityApi
builder.Services.AddScoped<IEmailService, EmailService>();

// –î–æ–¥–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–¥—ñ–π Identity
builder.Services.AddScoped<IdentityEventService>();

// –î–æ–¥–∞—î–º–æ EmailSender –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ MapIdentityApi
// –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±–∏–¥–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ —è–∫ Transient, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ DI
builder.Services.AddScoped<IEmailSender, IdentityEmailSender>();
builder.Services.AddScoped<IEmailSender<User>, IdentityEmailSender>();

// –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
var app = builder.Build();

// === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø MIDDLEWARE ===

// –£–≤—ñ–º–∫–Ω—É—Ç–∏ Swagger –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Identity Email Confirmation API v1");
        c.RoutePrefix = "swagger";
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—ó –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
    app.EnsureDatabaseCreated();
}

// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
app.UseExceptionHandler("/error");

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
app.UseAuthentication();
app.UseAuthorization();

// === –ï–ù–î–ü–û–Ü–ù–¢–ò ===

// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ API
app.MapGet("/", () => new
    {
        Message = "ASP.NET Core Identity Authentication API with Email Confirmation",
        Description = "–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ASP.NET Core Identity –≤ Minimal API –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏",
        Version = "1.0",
        Endpoints = new
        {
            // üî• –í–ë–£–î–û–í–ê–ù–Ü –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ Identity (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ MapIdentityApi)
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å Bearer Token –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é (Authorization: Bearer <token>)
            // ‚úÖ –ó –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–Æ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!
            Register = "POST /register - üìß –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
            Login = "POST /login - üö´ –ë–ª–æ–∫—É—î—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email",
            Refresh = "POST /refresh",
            ConfirmEmail = "GET /confirmEmail - ‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î email –∑–∞ —Ç–æ–∫–µ–Ω–æ–º",
            ResendConfirmationEmail = "POST /resendConfirmationEmail - üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞",
            ForgotPassword = "POST /forgotPassword",
            ResetPassword = "POST /resetPassword",
            Manage_2fa = "POST /manage/2fa",
            Manage_Info = "GET /manage/info",

            // –ö–∞—Å—Ç–æ–º–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
            UserProfile = "GET /auth/profile",
            AllUsers = "GET /auth/users",
            UpdateProfile = "PUT /auth/profile",
            EmailStatus = "GET /auth/email-status",

            // –¢–µ—Å—Ç–æ–≤—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
            DevGetToken = "GET /dev/get-confirmation-token/{email} - üîß DEV ONLY"
        },
        AuthenticationInfo = new
        {
            CurrentMode = "üî• –í–ë–£–î–û–í–ê–ù–ê Identity –∑ Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º",
            EmailConfirmationRequired = true,
            AutomaticEmailSending = "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ MapIdentityApi + IEmailSender",
            Note = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ–≤–∏–Ω–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É",
            BearerTokenUsage = "–î–æ–¥–∞–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫: Authorization: Bearer <your_token>",
            EmailConfirmationFlow = new[]
            {
                "1. üìù POST /register - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
                "2. üìß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email —Ç–∞ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
                "3. ‚úÖ GET /confirmEmail?userId=...&code=... - –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î email",
                "4. üîì POST /login - —Ç–µ–ø–µ—Ä –¥–æ–∑–≤–æ–ª—è—î—Ç—å—Å—è –≤—Ö—ñ–¥"
            },
            BuiltInFeatures = new[]
            {
                "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ email –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
                "‚úÖ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤—Ö–æ–¥—É –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email",
                "‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
                "‚úÖ –ö—Ä–∞—Å–∏–≤—ñ HTML —à–∞–±–ª–æ–Ω–∏ email",
                "‚úÖ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è"
            }
        },
        Features = new[]
        {
            "ASP.NET Core Identity",
            "Entity Framework Core",
            "SQLite Database",
            "Bearer Token Authentication",
            "Email Confirmation Required",
            "SMTP Email Sending",
            "Password Hashing",
            "User Management",
            "Automatic API Endpoints"
        }
    })
    .WithName("GetApiInfo")
    .WithSummary("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API")
    .WithDescription("–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó API");

// –ú–∞–ø–∏–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ Identity
// –¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î: /register, /login, /refresh, /confirmEmail —Ç–æ—â–æ
app.MapIdentityApi<User>();

// === –ö–ê–°–¢–û–ú–ù–Ü –ï–ù–î–ü–û–Ü–ù–¢–ò ===

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.MapGet("/auth/profile", async (ClaimsPrincipal claims, ApplicationDbContext context) =>
    {
        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ claims
        var userId = claims.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userId)) return Results.Unauthorized();

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        var user = await context.Users.FindAsync(userId);

        if (user == null) return Results.NotFound(new { Message = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–µ–∑ —á—É—Ç–ª–∏–≤–∏—Ö –¥–∞–Ω–∏—Ö)
        return Results.Ok(new
        {
            user.Id,
            user.UserName,
            user.Email,
            user.FirstName,
            user.LastName,
            user.FullName,
            user.CreatedAt,
            user.LastLoginAt,
            user.EmailConfirmed,
            user.EmailConfirmedAt,
            user.PhoneNumber,
            user.PhoneNumberConfirmed
        });
    })
    .RequireAuthorization()
    .WithName("GetUserProfile")
    .WithSummary("–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    .WithDescription("–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.MapPut("/auth/profile", async (ClaimsPrincipal claims, ApplicationDbContext context,
        UserManager<User> userManager, UpdateProfileRequest request) =>
    {
        var userId = claims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId)) return Results.Unauthorized();

        var user = await userManager.FindByIdAsync(userId);
        if (user == null) return Results.NotFound(new { Message = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user.FirstName = request.FirstName;
        user.LastName = request.LastName;
        user.PhoneNumber = request.PhoneNumber;

        var result = await userManager.UpdateAsync(user);

        if (result.Succeeded) return Results.Ok(new { Message = "–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ" });

        return Results.BadRequest(new { Message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é", result.Errors });
    })
    .RequireAuthorization()
    .WithName("UpdateUserProfile")
    .WithSummary("–û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    .WithDescription("–û–Ω–æ–≤–ª—é—î –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)
app.MapGet("/auth/users", async (ApplicationDbContext context) =>
    {
        var users = await context.Users
            .Select(u => new
            {
                u.Id,
                u.UserName,
                u.Email,
                u.FirstName,
                u.LastName,
                u.FullName,
                u.CreatedAt,
                u.LastLoginAt,
                u.EmailConfirmed,
                u.EmailConfirmedAt
            })
            .ToListAsync();

        return Results.Ok(users);
    })
    .RequireAuthorization()
    .WithName("GetAllUsers")
    .WithSummary("–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    .WithDescription("–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)");

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
app.MapGet("/auth/email-status", async (ClaimsPrincipal claims, UserManager<User> userManager) =>
    {
        var userId = claims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId)) return Results.Unauthorized();

        var user = await userManager.FindByIdAsync(userId);
        if (user == null) return Results.NotFound(new { Message = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

        return Results.Ok(new
        {
            user.Email,
            user.EmailConfirmed,
            user.EmailConfirmedAt,
            CanResendConfirmation = !user.EmailConfirmed
        });
    })
    .RequireAuthorization()
    .WithName("GetEmailStatus")
    .WithSummary("–°—Ç–∞—Ç—É—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email")
    .WithDescription("–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");

// –ö–∞—Å—Ç–æ–º–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
app.MapPost("/auth/resend-email-confirmation", async (UserManager<User> userManager,
        IEmailService emailService, ResendEmailRequest request) =>
    {
        var user = await userManager.FindByEmailAsync(request.Email);
        if (user == null)
            // –ù–µ —Ä–æ–∑–∫—Ä–∏–≤–∞—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email
            return Results.Ok(new
                { Message = "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email —ñ—Å–Ω—É—î, –ª–∏—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ" });

        if (user.EmailConfirmed) return Results.BadRequest(new { Message = "Email –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ" });

        // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        var token = await userManager.GenerateEmailConfirmationTokenAsync(user);

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        var confirmationLink =
            $"http://localhost:5121/auth/confirm-email?userId={user.Id}&code={Uri.EscapeDataString(token)}";

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email
        await emailService.SendEmailConfirmationAsync(user.Email!, confirmationLink, user.FullName);

        return Results.Ok(new { Message = "–õ–∏—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ" });
    })
    .WithName("ResendEmailConfirmation")
    .WithSummary("–ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")
    .WithDescription("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –ª–∏—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π email");

// –¢–ï–°–¢–û–í–ò–ô –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
app.MapGet("/dev/get-confirmation-token/{email}", async (UserManager<User> userManager, string email) =>
    {
        var user = await userManager.FindByEmailAsync(email);
        if (user == null) return Results.NotFound(new { Message = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

        if (user.EmailConfirmed) return Results.BadRequest(new { Message = "Email –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ" });

        // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        var token = await userManager.GenerateEmailConfirmationTokenAsync(user);

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        var confirmationLink =
            $"http://localhost:5121/auth/confirm-email?userId={user.Id}&code={Uri.EscapeDataString(token)}";

        return Results.Ok(new
        {
            UserId = user.Id,
            user.Email,
            Token = token,
            EncodedToken = Uri.EscapeDataString(token),
            ConfirmationLink = confirmationLink,
            Message = "‚ö†Ô∏è –¶–µ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏! –í–∏–¥–∞–ª—ñ—Ç—å –π–æ–≥–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ."
        });
    })
    .WithName("GetConfirmationTokenDev")
    .WithSummary("üîß DEV: –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")
    .WithDescription("‚ö†Ô∏è –¢–Ü–õ–¨–ö–ò –î–õ–Ø –†–û–ó–†–û–ë–ö–ò! –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–∫–µ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è");

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
app.MapGet("/error", () => Results.Problem("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É"))
    .ExcludeFromDescription();

// –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
app.Run();

// === –ú–û–î–ï–õ–Ü –ó–ê–ü–ò–¢–Ü–í ===

// –ú–æ–¥–µ–ª—å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
public record UpdateProfileRequest(string? FirstName, string? LastName, string? PhoneNumber);

// –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
public record ResendEmailRequest(string Email);