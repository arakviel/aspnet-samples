using System.Text.RegularExpressions;
using AspNet.MinimalApi.IdentityWithEmailConfirmationAuth.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;

namespace AspNet.MinimalApi.IdentityWithEmailConfirmationAuth.Services;

/// <summary>
///     –ö–∞—Å—Ç–æ–º–Ω–∏–π EmailSender –¥–ª—è ASP.NET Core Identity
///     –¶–µ–π –∫–ª–∞—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤–±—É–¥–æ–≤–∞–Ω–∏–º–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞–º–∏ Identity (/register, /confirmEmail —Ç–æ—â–æ)
///     –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
///     –†–µ–∞–ª—ñ–∑—É—î —è–∫ IEmailSender, —Ç–∞–∫ —ñ IEmailSender<User> –¥–ª—è –ø–æ–≤–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
/// </summary>
public class IdentityEmailSender : IEmailSender, IEmailSender<User>
{
    private readonly IEmailService _emailService;
    private readonly ILogger<IdentityEmailSender> _logger;

    public IdentityEmailSender(IEmailService emailService, ILogger<IdentityEmailSender> logger)
    {
        _emailService = emailService;
        _logger = logger;
    }

    // === –ú–ï–¢–û–î–ò –î–õ–Ø IEmailSender ===

    /// <summary>
    ///     –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–≥–∞–ª—å–Ω–∏–π email (IEmailSender)
    ///     –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —è–∫ fallback –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –≤–µ—Ä—Å—ñ–π –∞–±–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    /// </summary>
    /// <param name="email">Email –∞–¥—Ä–µ—Å–∞ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</param>
    /// <param name="subject">–¢–µ–º–∞ –ª–∏—Å—Ç–∞</param>
    /// <param name="htmlMessage">HTML –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</param>
    /// <returns>Task</returns>
    public async Task SendEmailAsync(string email, string subject, string htmlMessage)
    {
        try
        {
            _logger.LogInformation("üì¨ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ email –Ω–∞ {Email} –∑ —Ç–µ–º–æ—é '{Subject}'", email, subject);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–∑–∞ —Ç–µ–º–æ—é –∞–±–æ –≤–º—ñ—Å—Ç–æ–º)
            if (subject.Contains("Confirm") || htmlMessage.Contains("confirm") || htmlMessage.Contains("Confirm"))
            {
                _logger.LogInformation("üìß –í–∏—è–≤–ª–µ–Ω–æ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è - –≤–∏—Ç—è–≥—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è");

                // –í–∏—Ç—è–≥—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ HTML –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                var confirmationLink = ExtractConfirmationLink(htmlMessage);

                if (!string.IsNullOrEmpty(confirmationLink))
                {
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à –∫—Ä–∞—Å–∏–≤–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                    await _emailService.SendEmailConfirmationAsync(email, confirmationLink);
                    _logger.LogInformation("‚úÖ Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º —à–∞–±–ª–æ–Ω–æ–º");
                    return;
                }
            }

            // –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥
            await _emailService.SendEmailAsync(email, subject, htmlMessage);

            _logger.LogInformation("‚úÖ –ó–∞–≥–∞–ª—å–Ω–∏–π email —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {Email}", email);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ email –Ω–∞ {Email}", email);
            throw;
        }
    }

    // === –ú–ï–¢–û–î–ò –î–õ–Ø IEmailSender<User> ===

    /// <summary>
    ///     –í—ñ–¥–ø—Ä–∞–≤–ª—è—î email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (IEmailSender
    ///     <User>
    ///         )
    ///         –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ POST /register —Ç–∞ POST /resendConfirmationEmail
    /// </summary>
    /// <param name="user">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, –¥–ª—è —è–∫–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</param>
    /// <param name="email">Email –∞–¥—Ä–µ—Å–∞ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</param>
    /// <param name="confirmationLink">–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</param>
    /// <returns>Task</returns>
    public async Task SendConfirmationLinkAsync(User user, string email, string confirmationLink)
    {
        try
        {
            _logger.LogInformation("üìß –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId} ({FullName}) –Ω–∞ {Email}",
                user.Id, user.FullName, email);

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à –∫—Ä–∞—Å–∏–≤–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            await _emailService.SendEmailConfirmationAsync(email, confirmationLink, user.FullName);

            _logger.LogInformation("‚úÖ Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", user.Id);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", user.Id);
            throw;
        }
    }

    /// <summary>
    ///     –í—ñ–¥–ø—Ä–∞–≤–ª—è—î email –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (IEmailSender
    ///     <User>
    ///         )
    ///         –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ POST /forgotPassword
    /// </summary>
    /// <param name="user">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, –¥–ª—è —è–∫–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è</param>
    /// <param name="email">Email –∞–¥—Ä–µ—Å–∞ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</param>
    /// <param name="resetLink">–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è</param>
    /// <returns>Task</returns>
    public async Task SendPasswordResetLinkAsync(User user, string email, string resetLink)
    {
        try
        {
            _logger.LogInformation(
                "üîë –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId} ({FullName}) –Ω–∞ {Email}",
                user.Id, user.FullName, email);

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à –∫—Ä–∞—Å–∏–≤–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
            await _emailService.SendPasswordResetAsync(email, resetLink, user.FullName);

            _logger.LogInformation("‚úÖ Email —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", user.Id);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ email —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", user.Id);
            throw;
        }
    }

    /// <summary>
    ///     –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ–¥ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (IEmailSender
    ///     <User>
    ///         )
    ///         –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ POST /resetPassword –∑ –∫–æ–¥–æ–º
    /// </summary>
    /// <param name="user">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, –¥–ª—è —è–∫–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –∫–æ–¥</param>
    /// <param name="email">Email –∞–¥—Ä–µ—Å–∞ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</param>
    /// <param name="resetCode">–ö–æ–¥ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è</param>
    /// <returns>Task</returns>
    public async Task SendPasswordResetCodeAsync(User user, string email, string resetCode)
    {
        try
        {
            _logger.LogInformation("üî¢ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–¥—É —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId} ({FullName}) –Ω–∞ {Email}",
                user.Id, user.FullName, email);

            var subject = "–ö–æ–¥ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è";
            var htmlBody = $@"
                <div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
                    <h2 style='color: #333;'>–ö–æ–¥ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è</h2>
                    <p>–ü—Ä–∏–≤—ñ—Ç, {user.FullName}!</p>
                    <p>–í–∞—à –∫–æ–¥ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è:</p>
                    <div style='text-align: center; margin: 30px 0;'>
                        <span style='background-color: #f8f9fa; padding: 15px 25px; font-size: 24px; font-weight: bold; border: 2px solid #dee2e6; border-radius: 5px; display: inline-block; letter-spacing: 3px;'>
                            {resetCode}
                        </span>
                    </div>
                    <p style='color: #666; font-size: 14px;'>
                        –í–≤–µ–¥—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –≤ –¥–æ–¥–∞—Ç–∫—É –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è.
                    </p>
                    <p style='color: #666; font-size: 12px; margin-top: 30px;'>
                        –Ø–∫—â–æ –≤–∏ –Ω–µ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ–π –ª–∏—Å—Ç.
                    </p>
                </div>";

            await _emailService.SendEmailAsync(email, subject, htmlBody);

            _logger.LogInformation("‚úÖ –ö–æ–¥ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", user.Id);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ–¥—É —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", user.Id);
            throw;
        }
    }

    /// <summary>
    ///     –í–∏—Ç—è–≥—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ HTML –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    /// </summary>
    private static string ExtractConfirmationLink(string htmlMessage)
    {
        try
        {
            // –®—É–∫–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ HTML (–ø—Ä–æ—Å—Ç–∏–π regex –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)
            var match = Regex.Match(htmlMessage, @"href=[""']([^""']*confirmEmail[^""']*)[""']");
            return match.Success ? match.Groups[1].Value : string.Empty;
        }
        catch
        {
            return string.Empty;
        }
    }
}