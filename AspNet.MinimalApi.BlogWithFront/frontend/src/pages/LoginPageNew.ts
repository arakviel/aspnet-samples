import { BaseComponent } from '../components/BaseComponent';
import { authService } from '../services/AuthService';

/**
 * –°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É
 */
export class LoginPage extends BaseComponent {
  private isLoading = false;
  private errorMessage = '';
  private showTwoFactor = false;

  constructor() {
    super();
  }

  protected render(): void {
    console.log('LoginPage render –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    this.shadow.innerHTML = '';
    
    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ
    const styles = this.createStyles(`
      :host {
        display: block;
        padding: 2rem;
      }

      .container {
        max-width: 400px;
        margin: 0 auto;
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      h1 {
        text-align: center;
        color: #333;
        margin: 0 0 2rem;
      }

      .form-group {
        margin-bottom: 1rem;
      }

      label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #333;
      }

      input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        box-sizing: border-box;
      }

      input:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
      }

      .btn {
        width: 100%;
        padding: 0.75rem;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        margin-top: 1rem;
      }

      .btn:hover {
        background: #0056b3;
      }

      .links {
        text-align: center;
        margin-top: 1rem;
      }

      .links a {
        color: #007bff;
        text-decoration: none;
        margin: 0 0.5rem;
      }

      .links a:hover {
        text-decoration: underline;
      }

      .checkbox-group {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin: 1rem 0;
      }

      .checkbox-group input[type="checkbox"] {
        width: auto;
      }
    `);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    const container = this.createElement('div', '', 'container');

    let formContent = '';

    if (!this.showTwoFactor) {
      // –û—Å–Ω–æ–≤–Ω–∞ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥—É
      formContent = `
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email" required>
        </div>

        <div class="form-group">
          <label for="password">–ü–∞—Ä–æ–ª—å</label>
          <input type="password" id="password" name="password" required>
        </div>

        <div class="checkbox-group">
          <input type="checkbox" id="rememberMe" name="rememberMe">
          <label for="rememberMe">–ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –º–µ–Ω–µ</label>
        </div>
      `;
    } else {
      // –§–æ—Ä–º–∞ –¥–≤–æ—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ—ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
      formContent = `
        <div class="form-group">
          <label for="twoFactorCode">–ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó</label>
          <input type="text" id="twoFactorCode" name="twoFactorCode"
                 placeholder="000000" maxlength="6" required>
          <div style="font-size: 0.875rem; color: #666; margin-top: 0.25rem;">
            –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ –≤–∞—à–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
          </div>
        </div>
      `;
    }

    container.innerHTML = `
      <h1>üîê ${this.showTwoFactor ? '–î–≤–æ—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è' : '–í—Ö—ñ–¥'}</h1>

      ${this.errorMessage ? `<div style="background: #f8d7da; color: #721c24; padding: 0.75rem; border-radius: 4px; margin-bottom: 1rem; border: 1px solid #f5c6cb;">${this.errorMessage}</div>` : ''}

      <form id="login-form">
        ${formContent}

        <button type="submit" class="btn" ${this.isLoading ? 'disabled' : ''}>
          ${this.isLoading ? '‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...' : (this.showTwoFactor ? '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' : '–£–≤—ñ–π—Ç–∏')}
        </button>
      </form>

      ${!this.showTwoFactor ? `
        <div class="links">
          <a href="/forgot-password">–ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
          <a href="/register">–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</a>
        </div>
      ` : `
        <div class="links">
          <button type="button" id="back-btn" style="background: none; border: none; color: #007bff; cursor: pointer; text-decoration: underline;">
            ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤—Ö–æ–¥—É
          </button>
        </div>
      `}
    `;

    this.shadow.appendChild(styles);
    this.shadow.appendChild(container);
    
    console.log('LoginPage render –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }

  protected setupEventListeners(): void {
    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
    this.shadow.addEventListener('submit', (event) => {
      event.preventDefault();
      this.handleSubmit(event);
    });

    // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"
    this.shadow.addEventListener('click', (event) => {
      const target = event.target as HTMLElement;
      if (target.id === 'back-btn') {
        this.showTwoFactor = false;
        this.errorMessage = '';
        this.render();
      }
    });
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
   */
  private async handleSubmit(event: Event): Promise<void> {
    if (this.isLoading) return;

    const form = event.target as HTMLFormElement;
    const formData = new FormData(form);

    try {
      this.isLoading = true;
      this.errorMessage = '';
      this.render();

      if (!this.showTwoFactor) {
        // –û—Å–Ω–æ–≤–Ω–∏–π –≤—Ö—ñ–¥
        const email = formData.get('email') as string;
        const password = formData.get('password') as string;
        const rememberMe = formData.has('rememberMe');

        const result = await authService.login(email, password, rememberMe);

        if (result.requiresTwoFactor) {
          this.showTwoFactor = true;
          this.render();
          return;
        }

        // –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥
        this.handleSuccessfulLogin();
      } else {
        // –î–≤–æ—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        const twoFactorCode = formData.get('twoFactorCode') as string;

        // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É
        const email = sessionStorage.getItem('loginEmail') || '';
        const password = sessionStorage.getItem('loginPassword') || '';
        const rememberMe = sessionStorage.getItem('loginRememberMe') === 'true';

        await authService.login(email, password, rememberMe, twoFactorCode);

        // –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
        sessionStorage.removeItem('loginEmail');
        sessionStorage.removeItem('loginPassword');
        sessionStorage.removeItem('loginRememberMe');

        this.handleSuccessfulLogin();
      }
    } catch (error) {
      this.errorMessage = error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É';
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:', error);
    } finally {
      this.isLoading = false;
      this.render();
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É
   */
  private handleSuccessfulLogin(): void {
    console.log('–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    window.history.pushState(null, '', '/');
    window.dispatchEvent(new PopStateEvent('popstate'));
  }
}

// –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
customElements.define('login-page', LoginPage);
