import { BaseComponent } from '../components/BaseComponent';
import { authService } from '../services/AuthService';

/**
 * –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
 */
export class RegisterPage extends BaseComponent {
  private isLoading = false;
  private errorMessage = '';

  constructor() {
    super();
  }

  protected render(): void {
    console.log('RegisterPage render –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    this.shadow.innerHTML = '';
    
    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ
    const styles = this.createStyles(`
      :host {
        display: block;
        padding: 2rem;
      }

      .container {
        max-width: 400px;
        margin: 0 auto;
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      h1 {
        text-align: center;
        color: #333;
        margin: 0 0 2rem;
      }

      .form-group {
        margin-bottom: 1rem;
      }

      label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #333;
      }

      input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        box-sizing: border-box;
      }

      input:focus {
        outline: none;
        border-color: #28a745;
        box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
      }

      .btn {
        width: 100%;
        padding: 0.75rem;
        background: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        margin-top: 1rem;
      }

      .btn:hover {
        background: #218838;
      }

      .links {
        text-align: center;
        margin-top: 1rem;
      }

      .links a {
        color: #007bff;
        text-decoration: none;
      }

      .links a:hover {
        text-decoration: underline;
      }

      .password-hint {
        font-size: 0.875rem;
        color: #666;
        margin-top: 0.25rem;
      }

      .success-message {
        background: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 4px;
        margin-bottom: 1rem;
        border: 1px solid #c3e6cb;
      }
    `);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    const container = this.createElement('div', '', 'container');
    
    container.innerHTML = `
      <h1>üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h1>

      ${this.errorMessage ? `<div style="background: #f8d7da; color: #721c24; padding: 0.75rem; border-radius: 4px; margin-bottom: 1rem; border: 1px solid #f5c6cb;">${this.errorMessage}</div>` : ''}

      <form id="register-form">
        <div class="form-group">
          <label for="name">–Ü–º'—è</label>
          <input type="text" id="name" name="name" required>
        </div>

        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email" required>
        </div>

        <div class="form-group">
          <label for="password">–ü–∞—Ä–æ–ª—å</label>
          <input type="password" id="password" name="password" required>
          <div class="password-hint">–ú—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ª—ñ—Ç–µ—Ä–∏</div>
        </div>

        <div class="form-group">
          <label for="confirmPassword">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è</label>
          <input type="password" id="confirmPassword" name="confirmPassword" required>
        </div>

        <button type="submit" class="btn" ${this.isLoading ? 'disabled' : ''}>
          ${this.isLoading ? '‚è≥ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è...' : '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'}
        </button>
      </form>

      <div class="links">
        <p>–í–∂–µ –º–∞—î—Ç–µ –∞–∫–∞—É–Ω—Ç? <a href="/login">–£–≤—ñ–π—Ç–∏</a></p>
      </div>
    `;

    this.shadow.appendChild(styles);
    this.shadow.appendChild(container);
    
    console.log('RegisterPage render –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }

  protected setupEventListeners(): void {
    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
    this.shadow.addEventListener('submit', (event) => {
      event.preventDefault();
      this.handleSubmit(event);
    });
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
   */
  private async handleSubmit(event: Event): Promise<void> {
    if (this.isLoading) return;

    const form = event.target as HTMLFormElement;
    const formData = new FormData(form);

    try {
      this.isLoading = true;
      this.errorMessage = '';
      this.render();

      const name = formData.get('name') as string;
      const email = formData.get('email') as string;
      const password = formData.get('password') as string;
      const confirmPassword = formData.get('confirmPassword') as string;

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ
      if (password !== confirmPassword) {
        this.errorMessage = '–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å!';
        return;
      }

      if (password.length < 8) {
        this.errorMessage = '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤';
        return;
      }

      // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ API
      await authService.register(name, email, password, confirmPassword);

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
      const container = this.shadowQuery('.container');
      if (container) {
        const successDiv = document.createElement('div');
        successDiv.className = 'success-message';
        successDiv.innerHTML = '‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—é –ø–æ—à—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email.';
        container.insertBefore(successDiv, container.firstChild);

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
        setTimeout(() => {
          window.history.pushState(null, '', '/confirm-email');
          window.dispatchEvent(new PopStateEvent('popstate'));
        }, 3000);
      }

    } catch (error) {
      this.errorMessage = error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó';
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
    } finally {
      this.isLoading = false;
      this.render();
    }
  }
}

// –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
customElements.define('register-page', RegisterPage);
