import { BaseComponent } from '../components/BaseComponent';
import type { ForgotPasswordRequest } from '../types';

/**
 * –°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
 */
export class ForgotPasswordPage extends BaseComponent {
  private isLoading = false;
  private errorMessage = '';
  private emailSent = false;

  constructor() {
    super();
  }

  protected render(): void {
    this.shadow.innerHTML = '';
    
    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ
    const styles = this.createStyles(`
      :host {
        display: block;
        max-width: 400px;
        margin: 2rem auto;
        padding: 0 1rem;
      }

      .forgot-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        padding: 2rem;
      }

      .forgot-header {
        text-align: center;
        margin-bottom: 2rem;
      }

      .forgot-title {
        font-size: 1.75rem;
        font-weight: bold;
        color: #333;
        margin: 0 0 0.5rem;
      }

      .forgot-subtitle {
        color: #666;
        margin: 0;
        line-height: 1.5;
      }

      .form-group {
        margin-bottom: 1.5rem;
      }

      .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #333;
      }

      .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        transition: border-color 0.2s, box-shadow 0.2s;
      }

      .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
      }

      .form-control.error {
        border-color: #dc3545;
      }

      .btn {
        width: 100%;
        padding: 0.75rem;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
        margin-bottom: 1rem;
      }

      .btn-primary {
        background-color: #007bff;
        color: white;
      }

      .btn-primary:hover:not(:disabled) {
        background-color: #0056b3;
      }

      .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
      }

      .error-message {
        background-color: #f8d7da;
        color: #721c24;
        padding: 0.75rem;
        border-radius: 4px;
        margin-bottom: 1rem;
        border: 1px solid #f5c6cb;
      }

      .success-message {
        background-color: #d4edda;
        color: #155724;
        padding: 0.75rem;
        border-radius: 4px;
        margin-bottom: 1rem;
        border: 1px solid #c3e6cb;
      }

      .links {
        text-align: center;
        margin-top: 1.5rem;
      }

      .link {
        color: #007bff;
        text-decoration: none;
        margin: 0 0.5rem;
      }

      .link:hover {
        text-decoration: underline;
      }

      .loading-spinner {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        border: 2px solid #ffffff;
        border-radius: 50%;
        border-top-color: transparent;
        animation: spin 1s ease-in-out infinite;
        margin-right: 0.5rem;
      }

      @keyframes spin {
        to { transform: rotate(360deg); }
      }

      .success-content {
        text-align: center;
      }

      .success-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
      }

      .instructions {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 4px;
        padding: 1rem;
        margin: 1rem 0;
        text-align: left;
      }

      .instructions h4 {
        margin: 0 0 0.5rem;
        color: #333;
      }

      .instructions ul {
        margin: 0.5rem 0 0;
        padding-left: 1.25rem;
      }

      .instructions li {
        margin-bottom: 0.25rem;
        color: #666;
      }

      .email-highlight {
        color: #007bff;
        font-weight: 500;
      }
    `);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    const card = this.createElement('div', '', 'forgot-card');
    
    if (this.emailSent) {
      // –°—Ç–∞–Ω –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email
      card.innerHTML = `
        <div class="success-content">
          <div class="success-icon">üìß</div>
          <h1 class="forgot-title">–õ–∏—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!</h1>
          <p class="forgot-subtitle">
            –ú–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –Ω–∞ –∞–¥—Ä–µ—Å—É 
            <span class="email-highlight">${this.getEmailFromForm()}</span>
          </p>
          
          <div class="instructions">
            <h4>–©–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ:</h4>
            <ul>
              <li>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—é –ø–æ—à—Ç–æ–≤—É —Å–∫—Ä–∏–Ω—å–∫—É</li>
              <li>–ó–Ω–∞–π–¥—ñ—Ç—å –ª–∏—Å—Ç –∑ —Ç–µ–º–æ—é "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è"</li>
              <li>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –ª–∏—Å—Ç—ñ</li>
              <li>–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å</li>
              <li>–Ø–∫—â–æ –ª–∏—Å—Ç–∞ –Ω–µ–º–∞—î, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º"</li>
            </ul>
          </div>
          
          <div class="links">
            <a href="/login" class="link">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤—Ö–æ–¥—É</a>
          </div>
        </div>
      `;
    } else {
      // –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ñ–æ—Ä–º–∞
      const header = this.createElement('div', '', 'forgot-header');
      header.innerHTML = `
        <h1 class="forgot-title">üîë –ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å?</h1>
        <p class="forgot-subtitle">
          –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é email –∞–¥—Ä–µ—Å—É —ñ –º–∏ –Ω–∞–¥—ñ—à–ª–µ–º–æ –≤–∞–º —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
        </p>
      `;
      
      const form = document.createElement('form');
      form.id = 'forgot-form';
      
      // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
      if (this.errorMessage) {
        const errorDiv = this.createElement('div', this.errorMessage, 'error-message');
        form.appendChild(errorDiv);
      }
      
      // –ü–æ–ª–µ email
      form.innerHTML += `
        <div class="form-group">
          <label class="form-label" for="email">Email –∞–¥—Ä–µ—Å–∞</label>
          <input type="email" id="email" name="email" class="form-control" 
                 placeholder="your@email.com" required>
        </div>
      `;
      
      // –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
      const submitBtn = document.createElement('button');
      submitBtn.type = 'submit';
      submitBtn.className = 'btn btn-primary';
      submitBtn.disabled = this.isLoading;
      
      if (this.isLoading) {
        submitBtn.innerHTML = '<span class="loading-spinner"></span>–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è...';
      } else {
        submitBtn.textContent = '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó';
      }
      
      form.appendChild(submitBtn);
      
      // –ü–æ—Å–∏–ª–∞–Ω–Ω—è
      const links = this.createElement('div', '', 'links');
      links.innerHTML = `
        <a href="/login" class="link">‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤—Ö–æ–¥—É</a>
        <br><br>
        <span>–ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—É? </span>
        <a href="/register" class="link">–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è</a>
      `;

      card.appendChild(header);
      card.appendChild(form);
      card.appendChild(links);
    }

    this.shadow.appendChild(styles);
    this.shadow.appendChild(card);
  }

  protected setupEventListeners(): void {
    if (!this.emailSent) {
      // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
      this.shadow.addEventListener('submit', this.handleSubmit.bind(this));
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
   */
  private async handleSubmit(event: Event): Promise<void> {
    event.preventDefault();
    
    if (this.isLoading) return;
    
    const form = event.target as HTMLFormElement;
    const formData = new FormData(form);
    
    try {
      this.isLoading = true;
      this.errorMessage = '';
      this.render();
      
      const forgotData: ForgotPasswordRequest = {
        email: formData.get('email') as string
      };
      
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
      if (!this.validateEmail(forgotData.email)) {
        this.errorMessage = '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É email –∞–¥—Ä–µ—Å—É';
        return;
      }
      
      await this.sendResetEmail(forgotData);
      
    } catch (error) {
      this.errorMessage = error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç–∞';
    } finally {
      this.isLoading = false;
      this.render();
    }
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
   */
  private validateEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  /**
   * –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç–∞ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
   */
  private async sendResetEmail(forgotData: ForgotPasswordRequest): Promise<void> {
    // TODO: –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π API –≤–∏–∫–ª–∏–∫
    await new Promise(resolve => setTimeout(resolve, 1500));

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ email –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    this.storeEmailForDisplay(forgotData.email);
    
    this.emailSent = true;

    this.emit('password-reset-requested', { email: forgotData.email });
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è email –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   */
  private storeEmailForDisplay(email: string): void {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ sessionStorage –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    sessionStorage.setItem('resetEmail', email);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è email –∑ —Ñ–æ—Ä–º–∏ –∞–±–æ sessionStorage
   */
  private getEmailFromForm(): string {
    const storedEmail = sessionStorage.getItem('resetEmail');
    if (storedEmail) {
      return storedEmail;
    }
    
    const emailInput = this.querySelector('#email') as HTMLInputElement;
    return emailInput ? emailInput.value : '';
  }
}

// –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
customElements.define('forgot-password-page', ForgotPasswordPage);
