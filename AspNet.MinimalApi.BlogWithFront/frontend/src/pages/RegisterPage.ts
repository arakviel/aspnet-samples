import { BaseComponent } from '../components/BaseComponent';
import type { RegisterRequest } from '../types';

/**
 * –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
 */
export class RegisterPage extends BaseComponent {
  private isLoading = false;
  private errorMessage = '';
  private successMessage = '';

  constructor() {
    super();
  }

  protected render(): void {
    this.shadow.innerHTML = '';
    
    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ –∂ —Å—Ç–∏–ª—ñ, —â–æ –π –¥–ª—è LoginPage)
    const styles = this.createStyles(`
      :host {
        display: block;
        max-width: 400px;
        margin: 2rem auto;
        padding: 0 1rem;
      }

      .register-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        padding: 2rem;
      }

      .register-header {
        text-align: center;
        margin-bottom: 2rem;
      }

      .register-title {
        font-size: 1.75rem;
        font-weight: bold;
        color: #333;
        margin: 0 0 0.5rem;
      }

      .register-subtitle {
        color: #666;
        margin: 0;
      }

      .form-group {
        margin-bottom: 1.5rem;
      }

      .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #333;
      }

      .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        transition: border-color 0.2s, box-shadow 0.2s;
      }

      .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
      }

      .form-control.error {
        border-color: #dc3545;
      }

      .btn {
        width: 100%;
        padding: 0.75rem;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
        margin-bottom: 1rem;
      }

      .btn-primary {
        background-color: #28a745;
        color: white;
      }

      .btn-primary:hover:not(:disabled) {
        background-color: #218838;
      }

      .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
      }

      .error-message {
        background-color: #f8d7da;
        color: #721c24;
        padding: 0.75rem;
        border-radius: 4px;
        margin-bottom: 1rem;
        border: 1px solid #f5c6cb;
      }

      .success-message {
        background-color: #d4edda;
        color: #155724;
        padding: 0.75rem;
        border-radius: 4px;
        margin-bottom: 1rem;
        border: 1px solid #c3e6cb;
      }

      .links {
        text-align: center;
        margin-top: 1.5rem;
      }

      .link {
        color: #007bff;
        text-decoration: none;
        margin: 0 0.5rem;
      }

      .link:hover {
        text-decoration: underline;
      }

      .password-requirements {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 4px;
        padding: 0.75rem;
        margin-top: 0.5rem;
        font-size: 0.875rem;
        color: #666;
      }

      .password-requirements ul {
        margin: 0.5rem 0 0;
        padding-left: 1.25rem;
      }

      .password-requirements li {
        margin-bottom: 0.25rem;
      }

      .requirement-met {
        color: #28a745;
      }

      .requirement-unmet {
        color: #dc3545;
      }

      .loading-spinner {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        border: 2px solid #ffffff;
        border-radius: 50%;
        border-top-color: transparent;
        animation: spin 1s ease-in-out infinite;
        margin-right: 0.5rem;
      }

      @keyframes spin {
        to { transform: rotate(360deg); }
      }

      .field-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
      }
    `);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    const card = this.createElement('div', '', 'register-card');
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const header = this.createElement('div', '', 'register-header');
    header.innerHTML = `
      <h1 class="register-title">üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h1>
      <p class="register-subtitle">–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç</p>
    `;
    
    // –§–æ—Ä–º–∞
    const form = document.createElement('form');
    form.id = 'register-form';
    
    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (this.errorMessage) {
      const errorDiv = this.createElement('div', this.errorMessage, 'error-message');
      form.appendChild(errorDiv);
    }
    
    if (this.successMessage) {
      const successDiv = this.createElement('div', this.successMessage, 'success-message');
      form.appendChild(successDiv);
    }
    
    // –ü–æ–ª—è —Ñ–æ—Ä–º–∏
    form.innerHTML += `
      <div class="form-group">
        <label class="form-label" for="name">–Ü–º'—è</label>
        <input type="text" id="name" name="name" class="form-control" required>
        <div class="field-error" id="name-error"></div>
      </div>
      
      <div class="form-group">
        <label class="form-label" for="email">Email</label>
        <input type="email" id="email" name="email" class="form-control" required>
        <div class="field-error" id="email-error"></div>
      </div>
      
      <div class="form-group">
        <label class="form-label" for="password">–ü–∞—Ä–æ–ª—å</label>
        <input type="password" id="password" name="password" class="form-control" required>
        <div class="password-requirements">
          <strong>–í–∏–º–æ–≥–∏ –¥–æ –ø–∞—Ä–æ–ª—è:</strong>
          <ul>
            <li id="req-length" class="requirement-unmet">–ú—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤</li>
            <li id="req-uppercase" class="requirement-unmet">–û–¥–Ω–∞ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞</li>
            <li id="req-lowercase" class="requirement-unmet">–û–¥–Ω–∞ –º–∞–ª–∞ –ª—ñ—Ç–µ—Ä–∞</li>
            <li id="req-number" class="requirement-unmet">–û–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞</li>
            <li id="req-special" class="requirement-unmet">–û–¥–∏–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª</li>
          </ul>
        </div>
        <div class="field-error" id="password-error"></div>
      </div>
      
      <div class="form-group">
        <label class="form-label" for="confirmPassword">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è</label>
        <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
        <div class="field-error" id="confirmPassword-error"></div>
      </div>
    `;
    
    // –ö–Ω–æ–ø–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    const submitBtn = document.createElement('button');
    submitBtn.type = 'submit';
    submitBtn.className = 'btn btn-primary';
    submitBtn.disabled = this.isLoading;
    
    if (this.isLoading) {
      submitBtn.innerHTML = '<span class="loading-spinner"></span>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è...';
    } else {
      submitBtn.textContent = '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è';
    }
    
    form.appendChild(submitBtn);
    
    // –ü–æ—Å–∏–ª–∞–Ω–Ω—è
    const links = this.createElement('div', '', 'links');
    links.innerHTML = `
      <p>–í–∂–µ –º–∞—î—Ç–µ –∞–∫–∞—É–Ω—Ç? <a href="/login" class="link">–£–≤—ñ–π—Ç–∏</a></p>
    `;

    card.appendChild(header);
    card.appendChild(form);
    card.appendChild(links);

    this.shadow.appendChild(styles);
    this.shadow.appendChild(card);
  }

  protected setupEventListeners(): void {
    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
    this.shadow.addEventListener('submit', this.handleSubmit.bind(this));
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    this.shadow.addEventListener('input', this.handleInput.bind(this));
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤ –ø–æ–ª—è
   */
  private handleInput(event: Event): void {
    const target = event.target as HTMLInputElement;
    
    if (target.name === 'password') {
      this.validatePassword(target.value);
    } else if (target.name === 'confirmPassword') {
      this.validatePasswordConfirmation(target.value);
    }
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è
   */
  private validatePassword(password: string): void {
    const requirements = {
      length: password.length >= 8,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /\d/.test(password),
      special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
    };

    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
    Object.entries(requirements).forEach(([key, met]) => {
      const element = this.querySelector(`#req-${key}`);
      if (element) {
        element.className = met ? 'requirement-met' : 'requirement-unmet';
      }
    });
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
   */
  private validatePasswordConfirmation(confirmPassword: string): void {
    const passwordInput = this.querySelector('#password') as HTMLInputElement;
    const errorElement = this.querySelector('#confirmPassword-error');
    
    if (passwordInput && errorElement) {
      if (confirmPassword && confirmPassword !== passwordInput.value) {
        errorElement.textContent = '–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å';
      } else {
        errorElement.textContent = '';
      }
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
   */
  private async handleSubmit(event: Event): Promise<void> {
    event.preventDefault();
    
    if (this.isLoading) return;
    
    const form = event.target as HTMLFormElement;
    const formData = new FormData(form);
    
    // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏
    this.clearFieldErrors();
    
    try {
      this.isLoading = true;
      this.errorMessage = '';
      this.successMessage = '';
      this.render();
      
      const registerData: RegisterRequest = {
        name: formData.get('name') as string,
        email: formData.get('email') as string,
        password: formData.get('password') as string,
        confirmPassword: formData.get('confirmPassword') as string
      };
      
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ
      if (!this.validateForm(registerData)) {
        return;
      }
      
      await this.performRegistration(registerData);
      
    } catch (error) {
      this.errorMessage = error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó';
    } finally {
      this.isLoading = false;
      this.render();
    }
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏
   */
  private validateForm(data: RegisterRequest): boolean {
    let isValid = true;
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ
    if (!data.name.trim()) {
      this.showFieldError('name', '–Ü–º\'—è –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ');
      isValid = false;
    }
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
      this.showFieldError('email', '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email');
      isValid = false;
    }
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è
    if (data.password.length < 8) {
      this.showFieldError('password', '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤');
      isValid = false;
    }
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    if (data.password !== data.confirmPassword) {
      this.showFieldError('confirmPassword', '–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å');
      isValid = false;
    }
    
    return isValid;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –ø–æ–ª—è
   */
  private showFieldError(fieldName: string, message: string): void {
    const errorElement = this.querySelector(`#${fieldName}-error`);
    const inputElement = this.querySelector(`#${fieldName}`) as HTMLInputElement;
    
    if (errorElement) {
      errorElement.textContent = message;
    }
    
    if (inputElement) {
      inputElement.classList.add('error');
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –ø–æ–ª—ñ–≤
   */
  private clearFieldErrors(): void {
    const errorElements = this.querySelectorAll('.field-error');
    const inputElements = this.querySelectorAll('.form-control');
    
    errorElements.forEach(element => {
      element.textContent = '';
    });
    
    inputElements.forEach(element => {
      element.classList.remove('error');
    });
  }

  /**
   * –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   */
  private async performRegistration(registerData: RegisterRequest): Promise<void> {
    // TODO: –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π API –≤–∏–∫–ª–∏–∫
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞
    const mockResponse = {
      success: true,
      message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—é –ø–æ—à—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email.'
    };
    
    this.successMessage = mockResponse.message;
    this.emit('registration-success', { email: registerData.email });
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
    setTimeout(() => {
      window.history.pushState(null, '', '/confirm-email');
      document.dispatchEvent(new CustomEvent('navigation', {
        detail: { path: '/confirm-email' }
      }));
    }, 3000);
  }
}

// –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
customElements.define('register-page', RegisterPage);
