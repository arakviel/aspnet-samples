import { BaseComponent } from '../components/BaseComponent';

/**
 * –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
 */
export class ConfirmEmailPage extends BaseComponent {
  private isLoading = false;
  private isConfirming = false;
  private errorMessage = '';
  private successMessage = '';
  private email = '';

  constructor() {
    super();
  }

  connectedCallback(): void {
    super.connectedCallback();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–æ–∫–µ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ URL
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    const userId = urlParams.get('userId');
    
    if (token && userId) {
      this.confirmEmail(userId, token);
    }
  }

  protected render(): void {
    this.shadow.innerHTML = '';
    
    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ
    const styles = this.createStyles(`
      :host {
        display: block;
        max-width: 500px;
        margin: 2rem auto;
        padding: 0 1rem;
      }

      .confirm-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        padding: 2rem;
        text-align: center;
      }

      .icon {
        font-size: 4rem;
        margin-bottom: 1rem;
      }

      .title {
        font-size: 1.75rem;
        font-weight: bold;
        color: #333;
        margin: 0 0 1rem;
      }

      .subtitle {
        color: #666;
        margin: 0 0 2rem;
        line-height: 1.6;
      }

      .email-highlight {
        color: #007bff;
        font-weight: 500;
      }

      .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
        margin: 0.5rem;
        text-decoration: none;
        display: inline-block;
      }

      .btn-primary {
        background-color: #007bff;
        color: white;
      }

      .btn-primary:hover:not(:disabled) {
        background-color: #0056b3;
      }

      .btn-secondary {
        background-color: #6c757d;
        color: white;
      }

      .btn-secondary:hover:not(:disabled) {
        background-color: #545b62;
      }

      .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
      }

      .error-message {
        background-color: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 4px;
        margin: 1rem 0;
        border: 1px solid #f5c6cb;
      }

      .success-message {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 4px;
        margin: 1rem 0;
        border: 1px solid #c3e6cb;
      }

      .loading-spinner {
        display: inline-block;
        width: 2rem;
        height: 2rem;
        border: 3px solid #f3f3f3;
        border-radius: 50%;
        border-top-color: #007bff;
        animation: spin 1s ease-in-out infinite;
        margin: 1rem 0;
      }

      @keyframes spin {
        to { transform: rotate(360deg); }
      }

      .resend-section {
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid #e9ecef;
      }

      .resend-text {
        color: #666;
        margin-bottom: 1rem;
      }

      .countdown {
        color: #007bff;
        font-weight: 500;
      }

      .instructions {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 4px;
        padding: 1rem;
        margin: 1rem 0;
        text-align: left;
      }

      .instructions h4 {
        margin: 0 0 0.5rem;
        color: #333;
      }

      .instructions ul {
        margin: 0.5rem 0 0;
        padding-left: 1.25rem;
      }

      .instructions li {
        margin-bottom: 0.25rem;
        color: #666;
      }
    `);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    const card = this.createElement('div', '', 'confirm-card');
    
    if (this.isConfirming) {
      // –°—Ç–∞–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      card.innerHTML = `
        <div class="icon">‚è≥</div>
        <h1 class="title">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email...</h1>
        <div class="loading-spinner"></div>
        <p class="subtitle">–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ</p>
      `;
    } else if (this.successMessage) {
      // –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      card.innerHTML = `
        <div class="icon">‚úÖ</div>
        <h1 class="title">Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!</h1>
        <div class="success-message">${this.successMessage}</div>
        <a href="/login" class="btn btn-primary">–£–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</a>
      `;
    } else if (this.errorMessage) {
      // –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      card.innerHTML = `
        <div class="icon">‚ùå</div>
        <h1 class="title">–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</h1>
        <div class="error-message">${this.errorMessage}</div>
        <div class="resend-section">
          <p class="resend-text">–°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ:</p>
          <button class="btn btn-primary" id="resend-btn" ${this.isLoading ? 'disabled' : ''}>
            ${this.isLoading ? '–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è...' : '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ'}
          </button>
        </div>
        <a href="/login" class="btn btn-secondary">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤—Ö–æ–¥—É</a>
      `;
    } else {
      // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω - –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      card.innerHTML = `
        <div class="icon">üìß</div>
        <h1 class="title">–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤—ñ–π email</h1>
        <p class="subtitle">
          –ú–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –ª–∏—Å—Ç –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –Ω–∞ –∞–¥—Ä–µ—Å—É 
          <span class="email-highlight">${this.email || '–≤–∞—à—É –ø–æ—à—Ç—É'}</span>
        </p>
        
        <div class="instructions">
          <h4>–©–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ:</h4>
          <ul>
            <li>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—é –ø–æ—à—Ç–æ–≤—É —Å–∫—Ä–∏–Ω—å–∫—É</li>
            <li>–ó–Ω–∞–π–¥—ñ—Ç—å –ª–∏—Å—Ç –≤—ñ–¥ –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É</li>
            <li>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</li>
            <li>–Ø–∫—â–æ –ª–∏—Å—Ç–∞ –Ω–µ–º–∞—î, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º"</li>
          </ul>
        </div>
        
        <div class="resend-section">
          <p class="resend-text">–ù–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –ª–∏—Å—Ç?</p>
          <button class="btn btn-primary" id="resend-btn" ${this.isLoading ? 'disabled' : ''}>
            ${this.isLoading ? '–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è...' : '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ'}
          </button>
          <div id="countdown" class="countdown" style="display: none;"></div>
        </div>
        
        <a href="/login" class="btn btn-secondary">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤—Ö–æ–¥—É</a>
      `;
    }

    this.shadow.appendChild(styles);
    this.shadow.appendChild(card);
  }

  protected setupEventListeners(): void {
    // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤
    this.shadow.addEventListener('click', this.handleClick.bind(this));
    
    // –û—Ç—Ä–∏–º—É—î–º–æ email –∑ localStorage –∞–±–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    this.email = localStorage.getItem('registrationEmail') || '';
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤
   */
  private handleClick(event: Event): void {
    const target = event.target as HTMLElement;
    
    if (target.id === 'resend-btn' && !this.isLoading) {
      this.resendConfirmationEmail();
    }
  }

  /**
   * –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email
   */
  private async confirmEmail(_userId: string, _token: string): Promise<void> {
    try {
      this.isConfirming = true;
      this.render();
      
      // TODO: –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π API –≤–∏–∫–ª–∏–∫
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞
      const mockResponse = {
        success: true,
        message: '–í–∞—à email —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.'
      };
      
      this.successMessage = mockResponse.message;
      
      // –û—á–∏—â—É—î–º–æ localStorage
      localStorage.removeItem('registrationEmail');
      
    } catch (error) {
      this.errorMessage = error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email';
    } finally {
      this.isConfirming = false;
      this.render();
    }
  }

  /**
   * –ü–æ–≤—Ç–æ—Ä–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
   */
  private async resendConfirmationEmail(): Promise<void> {
    try {
      this.isLoading = true;
      this.errorMessage = '';
      this.render();
      
      // TODO: –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π API –≤–∏–∫–ª–∏–∫
      await new Promise(resolve => setTimeout(resolve, 1500));

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
      this.showTemporaryMessage('–õ–∏—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—é –ø–æ—à—Ç—É.', 'success');
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
      this.startResendCountdown();
      
    } catch (error) {
      this.errorMessage = error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç–∞';
      this.render();
    } finally {
      this.isLoading = false;
      this.render();
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  private showTemporaryMessage(message: string, type: 'success' | 'error'): void {
    const messageDiv = this.createElement('div', message, `${type}-message`);
    const card = this.querySelector('.confirm-card');
    
    if (card) {
      card.insertBefore(messageDiv, card.firstChild);
      
      // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        if (messageDiv.parentNode) {
          messageDiv.parentNode.removeChild(messageDiv);
        }
      }, 5000);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
   */
  private startResendCountdown(): void {
    const resendBtn = this.querySelector('#resend-btn') as HTMLButtonElement;
    const countdownDiv = this.querySelector('#countdown') as HTMLElement;
    
    if (!resendBtn || !countdownDiv) return;
    
    let seconds = 60;
    resendBtn.disabled = true;
    countdownDiv.style.display = 'block';
    
    const interval = setInterval(() => {
      countdownDiv.textContent = `–ü–æ–≤—Ç–æ—Ä–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–µ —á–µ—Ä–µ–∑ ${seconds} —Å–µ–∫—É–Ω–¥`;
      seconds--;
      
      if (seconds < 0) {
        clearInterval(interval);
        resendBtn.disabled = false;
        countdownDiv.style.display = 'none';
        resendBtn.textContent = '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ';
      }
    }, 1000);
  }
}

// –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
customElements.define('confirm-email-page', ConfirmEmailPage);
