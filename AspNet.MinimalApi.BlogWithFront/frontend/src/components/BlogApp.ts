import { BaseComponent } from './BaseComponent';
import { authService } from '../services/AuthService';
import type { User } from '../types';

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–¥–∞—Ç–∫—É
 */
export class BlogApp extends BaseComponent {
  private currentUser: User | null = null;
  private isAuthenticated = false;

  constructor() {
    super();
  }

  connectedCallback(): void {
    super.connectedCallback();
    this.initAuth();
  }

  disconnectedCallback(): void {
    super.disconnectedCallback();
    // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª—É—Ö–∞—á —Å—Ç–∞–Ω—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    authService.removeAuthStateListener(this.handleAuthStateChange.bind(this));
  }

  protected render(): void {
    console.log('BlogApp render –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    this.shadow.innerHTML = '';

    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ
    const styles = this.createStyles(`
      :host {
        display: block;
        min-height: 100vh;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f5f5f5;
      }

      .app-container {
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
      }

      .header {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
      }

      .content {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      h1 {
        color: #333;
        margin: 0 0 1rem;
      }

      .nav {
        margin-top: 1rem;
      }

      .nav a {
        display: inline-block;
        margin-right: 1rem;
        padding: 0.5rem 1rem;
        background: #007bff;
        color: white;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.2s;
      }

      .nav a:hover {
        background: #0056b3;
      }
    `);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç—ñ—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const container = this.createElement('div', '', 'app-container');

    const header = this.createElement('div', '', 'header');

    let navLinks = '';
    if (this.isAuthenticated && this.currentUser) {
      // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
      navLinks = `
        <a href="/">–ì–æ–ª–æ–≤–Ω–∞</a>
        <a href="/create-post">–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç</a>
        <a href="/profile">–ü—Ä–æ—Ñ—ñ–ª—å</a>
        <span style="color: #666; margin: 0 1rem;">–ü—Ä–∏–≤—ñ—Ç, ${this.escapeHtml(this.currentUser.name)}!</span>
        <button id="logout-btn" style="background: #dc3545; color: white; border: none; padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer;">–í–∏–π—Ç–∏</button>
      `;
    } else {
      // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–ª—è –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
      navLinks = `
        <a href="/">–ì–æ–ª–æ–≤–Ω–∞</a>
        <a href="/login">–í—Ö—ñ–¥</a>
        <a href="/register">–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</a>
      `;
    }

    header.innerHTML = `
      <h1>üìù –ë–ª–æ–≥</h1>
      <div class="nav">
        ${navLinks}
      </div>
    `;

    const content = this.createElement('div', '', 'content');
    content.id = 'page-content';

    container.appendChild(header);
    container.appendChild(content);

    this.shadow.appendChild(styles);
    this.shadow.appendChild(container);

    // –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ DOM –≥–æ—Ç–æ–≤–∏–π
    setTimeout(() => {
      this.showCurrentPage();
    }, 0);

    console.log('BlogApp render –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }

  protected setupEventListeners(): void {
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∫–ª—ñ–∫—ñ–≤ –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è—Ö —Ç–∞ –∫–Ω–æ–ø–∫–∞—Ö
    this.shadow.addEventListener('click', (event) => {
      const target = event.target as HTMLElement;

      if (target.tagName === 'A') {
        event.preventDefault();
        const href = target.getAttribute('href');
        if (href) {
          this.navigate(href);
        }
      } else if (target.id === 'logout-btn') {
        this.handleLogout();
      }
    });

    // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–º—ñ–Ω–∏ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó –±—Ä–∞—É–∑–µ—Ä–∞ (–∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥)
    window.addEventListener('popstate', () => {
      this.updateContent(window.location.pathname);
    });
  }

  /**
   * –ü—Ä–æ—Å—Ç–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
   */
  private navigate(path: string): void {
    window.history.pushState(null, '', path);
    this.updateContent(path);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
   */
  private showCurrentPage(): void {
    const path = window.location.pathname;
    console.log('showCurrentPage –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è —à–ª—è—Ö—É:', path);
    this.updateContent(path);
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —à–ª—è—Ö—É
   */
  private updateContent(path: string): void {
    const content = this.shadowQuery('#page-content');
    if (!content) return;

    // –û—á–∏—â—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
    content.innerHTML = '';

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    let pageElement: HTMLElement;

    switch (path) {
      case '/':
        pageElement = document.createElement('home-page');
        break;
      case '/login':
        pageElement = document.createElement('login-page');
        break;
      case '/register':
        pageElement = document.createElement('register-page');
        break;
      case '/confirm-email':
        pageElement = document.createElement('confirm-email-page');
        break;
      case '/forgot-password':
        pageElement = document.createElement('forgot-password-page');
        break;
      case '/profile':
        pageElement = document.createElement('profile-page');
        break;
      case '/create-post':
        pageElement = document.createElement('create-post-page');
        break;
      case '/reset-password':
        pageElement = document.createElement('reset-password-page');
        break;
      default:
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ—Å—Ç–∞ –∞–±–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        if (path.startsWith('/posts/')) {
          pageElement = document.createElement('post-page');
        } else if (path.startsWith('/edit-post/')) {
          pageElement = document.createElement('edit-post-page');
        } else {
          pageElement = document.createElement('div');
          pageElement.innerHTML = `
            <h2>–°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞</h2>
            <p>–®–ª—è—Ö: ${path}</p>
            <p><a href="/">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É</a></p>
          `;
        }
    }

    content.appendChild(pageElement);
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  private initAuth(): void {
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    this.currentUser = authService.getCurrentUser();
    this.isAuthenticated = authService.getIsAuthenticated();

    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á –∑–º—ñ–Ω —Å—Ç–∞–Ω—É
    authService.addAuthStateListener(this.handleAuthStateChange.bind(this));
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  private handleAuthStateChange(event: any): void {
    this.currentUser = event.detail.user;
    this.isAuthenticated = event.detail.isAuthenticated;
    this.render();
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É –∑ —Å–∏—Å—Ç–µ–º–∏
   */
  private async handleLogout(): Promise<void> {
    try {
      await authService.logout();
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
      this.navigate('/');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É –∑ —Å–∏—Å—Ç–µ–º–∏');
    }
  }

  /**
   * –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML
   */
  private escapeHtml(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
}

// –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
customElements.define('blog-app', BlogApp);
