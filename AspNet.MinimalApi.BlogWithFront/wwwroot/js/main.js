/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–æ–¥–∞—Ç–∫—É
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ç–∞ –∫–µ—Ä—É—î –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
 */

import { api } from './api.js';
import { router } from './router.js';
import {
  formatDate,
  showMessage,
  showLoading,
  isTokenValid,
  getUserRoles,
  getUserName,
  hasRole,
  escapeHtml,
  truncateText
} from './utils.js';

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É
 */
class BlogApp {
  constructor() {
    this.currentUser = null;
    this.currentPage = 'home';
    this.modal = null;

    this.setupRoutes();
    this.init();
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
   */
  setupRoutes() {
    router.register('/', () => this.showHomePage());
    router.register('/posts/:id', (params) => this.showPostPage(params.id));
    router.register('/admin', () => this.showAdminPage());
    router.register('/admin/users', () => this.showAdminPage('users'));
    router.register('/admin/posts', () => this.showAdminPage('posts'));
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
   */
  init() {
    this.setupEventListeners();
    this.checkAuth();
    this.renderAuthWidget();

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–æ—É—Ç–µ—Ä –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
    router.init();
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
   */
  setupEventListeners() {
    // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä
    document.addEventListener('click', (e) => {
      const navLink = e.target.closest('.nav-link');
      if (navLink) {
        e.preventDefault();
        const page = navLink.dataset.page;

        if (page === 'home') {
          router.navigate('/');
        } else if (page === 'admin') {
          router.navigate('/admin');
        }
      }
    });

    // –ú–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
    this.modal = document.getElementById('modal-overlay');
    document.querySelector('.modal-close').addEventListener('click', () => {
      this.hideModal();
    });
    
    this.modal.addEventListener('click', (e) => {
      if (e.target === this.modal) {
        this.hideModal();
      }
    });

    // –ö–Ω–æ–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É
    document.getElementById('create-post-btn').addEventListener('click', () => {
      this.showCreatePostModal();
    });

    // –ê–¥–º—ñ–Ω –≤–∫–ª–∞–¥–∫–∏
    document.addEventListener('click', (e) => {
      const tabBtn = e.target.closest('.tab-btn');
      if (tabBtn) {
        this.switchAdminTab(tabBtn.dataset.tab);
      }
    });
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  checkAuth() {
    const token = api.getToken();
    if (token && isTokenValid(token)) {
      this.currentUser = {
        name: getUserName(token),
        roles: getUserRoles(token),
        token: token
      };
    } else {
      this.currentUser = null;
      api.setToken(null);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç—å –≤—ñ–¥–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  renderAuthWidget() {
    const container = document.getElementById('auth-container');
    
    if (this.currentUser) {
      container.innerHTML = `
        <div class="auth-user-info">
          <span class="user-name">üë§ ${escapeHtml(this.currentUser.name)}</span>
          <button class="btn btn-secondary btn-small" id="logout-btn">–í–∏–π—Ç–∏</button>
        </div>
      `;
      
      document.getElementById('logout-btn').addEventListener('click', () => {
        this.logout();
      });

      // –ü–æ–∫–∞–∑—É—î–º–æ –∞–¥–º—ñ–Ω –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
      const adminLink = document.getElementById('admin-link');
      if (hasRole(this.currentUser.token, 'Admin')) {
        adminLink.style.display = 'block';
      } else {
        adminLink.style.display = 'none';
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
      const createBtn = document.getElementById('create-post-btn');
      if (hasRole(this.currentUser.token, 'Admin')) {
        createBtn.style.display = 'block';
      } else {
        createBtn.style.display = 'none';
      }
    } else {
      container.innerHTML = `
        <form class="auth-form" id="login-form">
          <div class="form-group">
            <input type="text" class="form-input" name="username" placeholder="Email –∞–±–æ —ñ–º'—è" required>
          </div>
          <div class="form-group">
            <input type="password" class="form-input" name="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
          </div>
          <button type="submit" class="btn btn-primary">–£–≤—ñ–π—Ç–∏</button>
          <button type="button" class="btn btn-secondary" id="register-btn">–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</button>
        </form>
      `;

      document.getElementById('login-form').addEventListener('submit', (e) => {
        this.handleLogin(e);
      });

      document.getElementById('register-btn').addEventListener('click', () => {
        this.showRegisterModal();
      });

      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∞–¥–º—ñ–Ω –µ–ª–µ–º–µ–Ω—Ç–∏
      document.getElementById('admin-link').style.display = 'none';
      document.getElementById('create-post-btn').style.display = 'none';
    }
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async handleLogin(e) {
    e.preventDefault();
    const formData = new FormData(e.target);
    const username = formData.get('username');
    const password = formData.get('password');

    try {
      await api.login(username, password);
      this.checkAuth();
      this.renderAuthWidget();
      showMessage('–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥!', 'success');
      this.loadPosts(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∫–∞–∑—É –∫–Ω–æ–ø–æ–∫
    } catch (error) {
      showMessage('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ.', 'error');
    }
  }

  /**
   * –í–∏—Ö–æ–¥–∏—Ç—å –∑ —Å–∏—Å—Ç–µ–º–∏
   */
  logout() {
    api.logout();
    this.currentUser = null;
    this.renderAuthWidget();
    this.showPage('home');
    this.loadPosts();
    showMessage('–í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏', 'success');
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
   */
  showHomePage() {
    this.showPage('home');
    this.loadPosts();
  }

  /**
   * –ü–æ–∫–∞–∑—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–∫—Ä–µ–º–æ–≥–æ –ø–æ—Å—Ç—É
   */
  async showPostPage(postId) {
    this.showPage('home'); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —è–∫ –±–∞–∑—É

    try {
      const post = await api.getPost(postId);
      this.renderSinglePost(post);
    } catch (error) {
      showMessage('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—É', 'error');
      router.navigate('/');
    }
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –∞–¥–º—ñ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫—É
   */
  showAdminPage(tab = 'users') {
    if (!this.currentUser || !hasRole(this.currentUser.token, 'Admin')) {
      showMessage('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ', 'error');
      router.navigate('/');
      return;
    }

    this.showPage('admin');
    this.switchAdminTab(tab);
  }

  /**
   * –ü–æ–∫–∞–∑—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É
   */
  showPage(pageName) {
    // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
    document.querySelectorAll('.nav-link').forEach(link => {
      link.classList.remove('active');
      if (link.dataset.page === pageName) {
        link.classList.add('active');
      }
    });

    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    document.querySelectorAll('.page').forEach(page => {
      page.classList.remove('active');
    });

    const targetPage = document.getElementById(`${pageName}-page`);
    if (targetPage) {
      targetPage.classList.add('active');
      this.currentPage = pageName;
    }
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
   */
  showModal(title, content) {
    document.getElementById('modal-title').textContent = title;
    document.getElementById('modal-body').innerHTML = content;
    this.modal.classList.add('active');
  }

  /**
   * –ü—Ä–∏—Ö–æ–≤—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
   */
  hideModal() {
    this.modal.classList.remove('active');
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   */
  showRegisterModal() {
    const content = `
      <form id="register-form">
        <div class="form-group">
          <label class="form-label">–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</label>
          <input type="text" class="form-input" name="username" required>
        </div>
        <div class="form-group">
          <label class="form-label">Email:</label>
          <input type="email" class="form-input" name="email" required>
        </div>
        <div class="form-group">
          <label class="form-label">–ü–∞—Ä–æ–ª—å:</label>
          <input type="password" class="form-input" name="password" required>
        </div>
        <div class="form-group">
          <button type="submit" class="btn btn-primary">–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è</button>
        </div>
      </form>
    `;

    this.showModal('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è', content);

    document.getElementById('register-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      
      try {
        await api.register(
          formData.get('username'),
          formData.get('email'),
          formData.get('password')
        );
        this.hideModal();
        showMessage('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏.', 'success');
      } catch (error) {
        showMessage('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', 'error');
      }
    });
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É
   */
  showCreatePostModal() {
    const content = `
      <form id="create-post-form">
        <div class="form-group">
          <label class="form-label">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
          <input type="text" class="form-input" name="title" required>
        </div>
        <div class="form-group">
          <label class="form-label">–ö–æ–Ω—Ç–µ–Ω—Ç:</label>
          <textarea class="form-textarea" name="content" required></textarea>
        </div>
        <div class="form-group">
          <button type="submit" class="btn btn-primary">–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç</button>
        </div>
      </form>
    `;

    this.showModal('–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—Å—Ç', content);

    document.getElementById('create-post-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      
      try {
        await api.createPost(
          formData.get('title'),
          formData.get('content')
        );
        this.hideModal();
        this.loadPosts();
        showMessage('–ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!', 'success');
      } catch (error) {
        showMessage('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É.', 'error');
      }
    });
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ—Å—Ç–∏
   */
  async loadPosts() {
    const container = document.getElementById('posts-container');
    showLoading(container);

    try {
      const posts = await api.getPosts();
      this.renderPosts(posts);
    } catch (error) {
      container.innerHTML = '<div class="alert alert-error">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤</div>';
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤
   */
  renderPosts(posts) {
    const container = document.getElementById('posts-container');

    if (posts.length === 0) {
      container.innerHTML = '<div class="alert alert-warning">–ü–æ—Å—Ç—ñ–≤ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î</div>';
      return;
    }

    container.innerHTML = posts.map(post => `
      <article class="card">
        <div class="card-header">
          <div>
            <h3 class="card-title">
              <a href="/posts/${post.id}" class="post-link">${escapeHtml(post.title)}</a>
            </h3>
            <div class="card-meta">${formatDate(post.createdDate)}</div>
          </div>
          ${this.currentUser && hasRole(this.currentUser.token, 'Admin') ? `
            <div class="card-actions">
              <button class="btn btn-secondary btn-small edit-post-btn" data-id="${post.id}">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
              <button class="btn btn-danger btn-small delete-post-btn" data-id="${post.id}">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
            </div>
          ` : ''}
        </div>
        <div class="card-content">
          ${escapeHtml(truncateText(post.content, 300))}
          ${post.content.length > 300 ? `<br><a href="/posts/${post.id}" class="read-more">–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ...</a>` : ''}
        </div>
        <div class="stats">
          <div class="stat-item">
            <button class="btn btn-secondary btn-small like-btn" data-id="${post.id}" ${!this.currentUser ? 'disabled' : ''}>
              üíô ${post.likesCount}
            </button>
          </div>
          <div class="stat-item">
            <a href="/posts/${post.id}" class="comment-link">üí¨ ${post.commentsCount} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤</a>
          </div>
        </div>
      </article>
    `).join('');

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    this.setupPostEventListeners();
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç—å –æ–∫—Ä–µ–º–∏–π –ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏
   */
  renderSinglePost(post) {
    const container = document.getElementById('posts-container');

    container.innerHTML = `
      <article class="card">
        <div class="card-header">
          <div>
            <h1 class="card-title">${escapeHtml(post.title)}</h1>
            <div class="card-meta">
              ${formatDate(post.createdDate)} ‚Ä¢ –ê–≤—Ç–æ—Ä: ${escapeHtml(post.authorName)}
            </div>
          </div>
          ${this.currentUser && hasRole(this.currentUser.token, 'Admin') ? `
            <div class="card-actions">
              <button class="btn btn-secondary btn-small edit-post-btn" data-id="${post.id}">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
              <button class="btn btn-danger btn-small delete-post-btn" data-id="${post.id}">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
            </div>
          ` : ''}
        </div>
        <div class="card-content">
          ${escapeHtml(post.content).replace(/\n/g, '<br>')}
        </div>
        <div class="stats">
          <div class="stat-item">
            <button class="btn btn-secondary btn-small like-btn" data-id="${post.id}" ${!this.currentUser ? 'disabled' : ''}>
              üíô ${post.likesCount}
            </button>
          </div>
          <div class="stat-item">
            üí¨ ${post.comments.length} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
          </div>
        </div>

        <!-- –°–µ–∫—Ü—ñ—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ -->
        <div class="comments-section">
          <div class="comments-header">
            <h3>–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ</h3>
            ${this.currentUser ? `
              <button class="btn btn-primary btn-small" id="add-comment-btn" data-post-id="${post.id}">
                ‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä
              </button>
            ` : ''}
          </div>
          <div class="comments-list">
            ${post.comments.map(comment => `
              <div class="comment">
                <div class="comment-header">
                  <span class="comment-author">${escapeHtml(comment.authorName)}</span>
                  <span class="comment-date">${formatDate(comment.createdDate)}</span>
                  ${this.currentUser && hasRole(this.currentUser.token, 'Admin') ? `
                    <div class="comment-actions">
                      <button class="btn btn-danger btn-small delete-comment-btn" data-id="${comment.id}">üóëÔ∏è</button>
                    </div>
                  ` : ''}
                </div>
                <div class="comment-content">
                  ${escapeHtml(comment.content).replace(/\n/g, '<br>')}
                </div>
              </div>
            `).join('')}
          </div>
        </div>
      </article>

      <div class="navigation-back">
        <a href="/" class="btn btn-secondary">‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç—ñ–≤</a>
      </div>
    `;

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    this.setupPostEventListeners();
    this.setupCommentEventListeners();
  }

  /**
   * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –ø–æ—Å—Ç—ñ–≤
   */
  setupPostEventListeners() {
    // –õ–∞–π–∫–∏
    document.querySelectorAll('.like-btn').forEach(btn => {
      btn.addEventListener('click', async () => {
        if (!this.currentUser) {
          showMessage('–£–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± —Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏', 'warning');
          return;
        }

        try {
          const result = await api.toggleLike(btn.dataset.id);
          btn.innerHTML = `üíô ${result.likes}`;
          showMessage(result.liked ? '–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!' : '–õ–∞–π–∫ –∑–Ω—è—Ç–æ!', 'success');
        } catch (error) {
          showMessage('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ª–∞–π–∫–∞–º–∏', 'error');
        }
      });
    });

    // –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
    document.querySelectorAll('.edit-post-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        this.showEditPostModal(btn.dataset.id);
      });
    });

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
    document.querySelectorAll('.delete-post-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        this.deletePost(btn.dataset.id);
      });
    });
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç—É
   */
  async showEditPostModal(postId) {
    try {
      const post = await api.getPost(postId);
      
      const content = `
        <form id="edit-post-form">
          <div class="form-group">
            <label class="form-label">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
            <input type="text" class="form-input" name="title" value="${escapeHtml(post.title)}" required>
          </div>
          <div class="form-group">
            <label class="form-label">–ö–æ–Ω—Ç–µ–Ω—Ç:</label>
            <textarea class="form-textarea" name="content" required>${escapeHtml(post.content)}</textarea>
          </div>
          <div class="form-group">
            <button type="submit" class="btn btn-primary">–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏</button>
          </div>
        </form>
      `;

      this.showModal('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Å—Ç', content);

      document.getElementById('edit-post-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        
        try {
          await api.updatePost(
            postId,
            formData.get('title'),
            formData.get('content')
          );
          this.hideModal();
          this.loadPosts();
          showMessage('–ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
        } catch (error) {
          showMessage('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É.', 'error');
        }
      });
    } catch (error) {
      showMessage('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.', 'error');
    }
  }

  /**
   * –í–∏–¥–∞–ª—è—î –ø–æ—Å—Ç
   */
  async deletePost(postId) {
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –ø–æ—Å—Ç?')) {
      return;
    }

    try {
      await api.deletePost(postId);

      // –Ø–∫—â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –æ–∫—Ä–µ–º–æ–≥–æ –ø–æ—Å—Ç—É, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
      if (router.getCurrentRoute().includes('/posts/')) {
        router.navigate('/');
      } else {
        this.loadPosts();
      }

      showMessage('–ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!', 'success');
    } catch (error) {
      showMessage('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É.', 'error');
    }
  }

  /**
   * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
   */
  setupCommentEventListeners() {
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    const addCommentBtn = document.getElementById('add-comment-btn');
    if (addCommentBtn) {
      addCommentBtn.addEventListener('click', () => {
        this.showAddCommentModal(addCommentBtn.dataset.postId);
      });
    }

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    document.querySelectorAll('.delete-comment-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        this.deleteComment(btn.dataset.id);
      });
    });
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
   */
  showAddCommentModal(postId) {
    const content = `
      <form id="add-comment-form">
        <div class="form-group">
          <label class="form-label">–ö–æ–º–µ–Ω—Ç–∞—Ä:</label>
          <textarea class="form-textarea" name="content" required placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä..."></textarea>
        </div>
        <div class="form-group">
          <button type="submit" class="btn btn-primary">–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä</button>
        </div>
      </form>
    `;

    this.showModal('–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä', content);

    document.getElementById('add-comment-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);

      try {
        await api.createComment(postId, formData.get('content'));
        this.hideModal();

        // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏
        const post = await api.getPost(postId);
        this.renderSinglePost(post);

        showMessage('–ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!', 'success');
      } catch (error) {
        showMessage('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è.', 'error');
      }
    });
  }

  /**
   * –í–∏–¥–∞–ª—è—î –∫–æ–º–µ–Ω—Ç–∞—Ä
   */
  async deleteComment(commentId) {
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∫–æ–º–µ–Ω—Ç–∞—Ä?')) {
      return;
    }

    try {
      await api.deleteComment(commentId);

      // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Å—Ç
      const currentRoute = router.getCurrentRoute();
      const postIdMatch = currentRoute.match(/\/posts\/(\d+)/);
      if (postIdMatch) {
        const post = await api.getPost(postIdMatch[1]);
        this.renderSinglePost(post);
      }

      showMessage('–ö–æ–º–µ–Ω—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!', 'success');
    } catch (error) {
      showMessage('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è.', 'error');
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ç–µ–Ω—Ç –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
   */
  loadAdminContent() {
    this.switchAdminTab('users');
  }

  /**
   * –ü–µ—Ä–µ–º–∏–∫–∞—î –≤–∫–ª–∞–¥–∫—É –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
   */
  async switchAdminTab(tabName) {
    // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.classList.remove('active');
      if (btn.dataset.tab === tabName) {
        btn.classList.add('active');
      }
    });

    const container = document.getElementById('admin-content');
    showLoading(container);

    try {
      if (tabName === 'users') {
        await this.loadUsersTab();
      } else if (tabName === 'posts') {
        await this.loadPostsTab();
      }
    } catch (error) {
      container.innerHTML = '<div class="alert alert-error">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</div>';
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤–∫–ª–∞–¥–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
   */
  async loadUsersTab() {
    const users = await api.getUsers();
    const container = document.getElementById('admin-content');
    
    container.innerHTML = `
      <table class="table">
        <thead>
          <tr>
            <th>–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</th>
            <th>Email</th>
            <th>–†–æ–ª—ñ</th>
            <th>–î—ñ—ó</th>
          </tr>
        </thead>
        <tbody>
          ${users.map(user => `
            <tr>
              <td>${escapeHtml(user.userName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}</td>
              <td>${escapeHtml(user.email || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}</td>
              <td>${user.roles.join(', ')}</td>
              <td>
                <button class="btn btn-secondary btn-small assign-role-btn" data-user-id="${user.id}">
                  –ö–µ—Ä—É–≤–∞—Ç–∏ —Ä–æ–ª—è–º–∏
                </button>
              </td>
            </tr>
          `).join('')}
        </tbody>
      </table>
    `;

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    document.querySelectorAll('.assign-role-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        this.showRoleManagementModal(btn.dataset.userId);
      });
    });
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤–∫–ª–∞–¥–∫—É –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω–∞
   */
  async loadPostsTab() {
    const posts = await api.getAdminPosts();
    const container = document.getElementById('admin-content');
    
    container.innerHTML = `
      <table class="table">
        <thead>
          <tr>
            <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
            <th>–ê–≤—Ç–æ—Ä</th>
            <th>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</th>
            <th>–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ</th>
            <th>–õ–∞–π–∫–∏</th>
            <th>–î—ñ—ó</th>
          </tr>
        </thead>
        <tbody>
          ${posts.map(post => `
            <tr>
              <td>${escapeHtml(truncateText(post.title, 50))}</td>
              <td>${escapeHtml(post.authorName)}</td>
              <td>${formatDate(post.createdDate)}</td>
              <td>${post.commentsCount}</td>
              <td>${post.likesCount}</td>
              <td>
                <button class="btn btn-secondary btn-small edit-post-btn" data-id="${post.id}">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                <button class="btn btn-danger btn-small delete-post-btn" data-id="${post.id}">–í–∏–¥–∞–ª–∏—Ç–∏</button>
              </td>
            </tr>
          `).join('')}
        </tbody>
      </table>
    `;

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    document.querySelectorAll('.edit-post-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        this.showEditPostModal(btn.dataset.id);
      });
    });

    document.querySelectorAll('.delete-post-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        this.deletePost(btn.dataset.id);
      });
    });
  }

  /**
   * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–ª—è–º–∏
   */
  showRoleManagementModal(userId) {
    const content = `
      <div class="form-group">
        <label class="form-label">–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–ª—å:</label>
        <select class="form-input" id="role-select">
          <option value="User">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</option>
          <option value="Admin">–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä</option>
        </select>
        <button class="btn btn-primary" id="assign-role-btn" data-user-id="${userId}">
          –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–ª—å
        </button>
      </div>
      <div class="form-group">
        <label class="form-label">–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–ª—å:</label>
        <select class="form-input" id="remove-role-select">
          <option value="User">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</option>
          <option value="Admin">–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä</option>
        </select>
        <button class="btn btn-danger" id="remove-role-btn" data-user-id="${userId}">
          –í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–ª—å
        </button>
      </div>
    `;

    this.showModal('–ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–ª—è–º–∏', content);

    document.getElementById('assign-role-btn').addEventListener('click', async () => {
      const role = document.getElementById('role-select').value;
      try {
        await api.assignRole(userId, role);
        this.hideModal();
        this.loadUsersTab();
        showMessage(`–†–æ–ª—å ${role} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞!`, 'success');
      } catch (error) {
        showMessage('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–ª—ñ.', 'error');
      }
    });

    document.getElementById('remove-role-btn').addEventListener('click', async () => {
      const role = document.getElementById('remove-role-select').value;
      try {
        await api.removeRole(userId, role);
        this.hideModal();
        this.loadUsersTab();
        showMessage(`–†–æ–ª—å ${role} –≤–∏–¥–∞–ª–µ–Ω–∞!`, 'success');
      } catch (error) {
        showMessage('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ.', 'error');
      }
    });
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
  new BlogApp();
});
